#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: f192138e-b2ae-4d24-806e-92fb119780e7
# Source File: C:\Users\cmarble\Documents\SAPIEN\PowerShell Studio\Projects\Office365\Office365.psproj
#------------------------------------------------------------------------
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.143
     Generated on:       9/15/2017 5:57 PM
     Generated by:       cmarble
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2017
#>



#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-GUI_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}


#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	#region Control Helper Functions
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	
	$UpcomingFeaturesMsg = @"
Expanded Calendar Permissions`n
Start SharePoint Integration and Management`n
"@
	$global:loggedinas = ""
	$global:MSOLAccount = "ver"
	$global:syncServer = "dc1exch01.sales.verrents.com"
	
	#------------------------
	# End Global Variables
	#------------------------
	
	function login
	{
			$username = $adminEmail.Text
			$password = $adminPassword.Text
			#These two fields grab the text in the text boxes
			#This takes the password and converts it to a secure string (Despite it already being so) and making it usable for automatic login.
			$pass = ConvertTo-SecureString -String $password -AsPlainText -Force
			$cred = New-Object -TypeName System.Management.Automation.PSCredential($username, $pass)
			try
			{
				#Connect to Office365 Tenant
				$output.AppendText("`nAttemping login as $username to Office365 Tenant..")
				$Office365Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $cred -Authentication Basic -AllowRedirection -Name 'Office 365'
				Import-PSSession -session $Office365Session
				#Connect to Azure Tenant
				$output.AppendText("Success.`nAttempting login into Azure Active Directory..")
				Connect-MsolService -Credential $cred
				
				# Connect to On-Prem
				$output.AppendText("Success.`nAttempting login to Local Exchange Server..")
				$OnPremSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri http://$syncServer/PowerShell/ -Credential $cred -Authentication Kerberos -Name 'On Prem Session'
				hseg
				
				# Succesful Login / Welcome & Titlebar Change 
				
				[console]::beep(900, 350)
				[console]::beep(1000, 350)
				[console]::beep(800, 350)
				[console]::beep(400, 350)
				[console]::beep(600, 850)
				$you = get-user -identity $username | Select-Object DisplayName
				$you = $you -replace ".*=" -replace "}"
				$output.AppendText("Success.`nLogin Succeeded.`nWelcome back $you")
				$GUI.Text = "VER Microsoft Office365 Tool. Logged in as $username"
				$global:loggedinas = "$you"
			}
			catch
			{
				$output.AppendText("`nLogin Failure")
				[console]::beep(360, 200)
				[console]::beep(300, 300)
				#Clears password after login or failure for easier reattempt
				$adminPassword.Text = ""
				return
			}
	}
	
	function get-calendarPermissions{
		try
		{
			$folder = '{0}:\calendar' -f $CalendarEmail.Text
			
			$calendars = Get-MailboxFolderPermission -identity $folder | Select-Object User, AccessRights | Out-String
			$calendars = $calendars -replace "[{}]"
			
			$output.Text = $calendars
		}
		
		catch
		{
			$output.AppendText("Calendar not found. Check spelling or if it exists.")
		}
		
	}
	
	function set-calendarPermissions{
		$calendar = '{0}:\calendar' -f $CalendarEmail.Text
		$calname = Get-Mailbox
		$user = '{0}' -f $UserEmail.Text
		if ($calendarPermissions.SelectedIndex -eq 0)
		{
			$output.AppendText("`nAdding Read Permissions to $user on $calstr")
			Add-MailboxFolderPermission -identity $calendar -user $user -AccessRights "Reviewer"
			check_calendar
		}
		
		elseif ($calendarPermissions.SelectedIndex -eq 1)
		{
			$output.AppendText("`rAssigning Edit Permissions to $user on $calstr")
			Add-MailboxFolderPermission -identity $calendar -user $user -AccessRights "Editor"
			check_calendar
		}
		
		elseif ($calendarPermissions.SelectedIndex -eq 2)
		{
			$output.AppendText("`nAdding Owner Permissions to $user on $calstr")
			Add-MailboxFolderPermission -identity $calendar -user $user -AccessRights "Owner"
			check_calendar
		}
		
		elseif ($calendarPermissions.SelectedIndex -eq 3)
		{
			Remove-MailboxFolderPermission -identity $calendar -user $user
			$output.AppendText("`nPermissions from $user removed from $calstr")
		}
		
		else
		{
			$output.text = "No permissions set to add. Please select a level of permissions for this user."
		}
	}
	
	function create-user{
		Param (	[string]$name,
				[string]$fn,
				[string]$alias,
				[string]$ln,
				[string]$upn,
				[string]$ou)
	
			$password = generate-password("Domain")
			$revpw = generate-password("REV")
			$pw = ConvertTo-SecureString -String $password -AsPlainText -Force
		try
		{
			$output.AppendText("`nCreating user...")
			New-RemoteMailbox -name $name -DisplayName $name -FirstName $fn -LastName $ln -Password $pw -UserPrincipalName $upn -ResetPasswordOnNextLogon $true -OnPremisesOrganizationalUnit $ou -PrimarySMTPAddress $upn -Alias $alias -RemoteRoutingAddress "$alias@ver.mail.onmicrosoft.com"
			$output.AppendText("done.`nAdding e-mail aliases..")
			Set-RemoteMailbox $upn -EmailAddresses @{ add = "$upn", "$alias@verrents.com" }
			$output.AppendText("done.`n`nINFORMATION FOR MAILER FORM:`nCreated $name`nUPN Used: $upn`nDomain Password $password`nREV Password: $revpw`n`nLicense must be manually assigned.")
			$output.AppendText("`nYou may DirSync to expedite the process.")
		}
		catch
		{
			$output.AppendText("`nYou're bad.")	
		}
	}
	
	function terminate-user{
		# Get User Names
		$termedUser = '{0}' -f $TerminatedUser.Text
		$fwdUser = '{0}' -f $ForwardUser.Text
		$delegUser = '{0}' -f $DelegateUser.Text
		$alias = $termedUser.Split("@")[0]
		# Clear Output Box
		$output.Text = ''
		
		# Checking for fowarding request
		If ($EnableForwardingYes.Checked -eq $True)
		{
			#Forward Email
			try
			{
				Set-Mailbox $termedUser -ForwardingAddress $fwdUser
				$output.AppendText("`nForwarding email from $termedUser to $fwdUser... ")
				
				#Change Description
				Set-ADUSer $alias -Description "Terminated. Email forwarding to $fwdUser"
			}
			catch
			{
				$output.AppendText("`nError forwarding accounts. Check Terminated and Forwarding addresses.")
			}
		}
		
		# If no forwarding request, go with 
		ElseIf ($EnableForwardingNo.Checked -eq $True)
		{
			#Change Description (if not forwarding)
			$output.AppendText("done.`nChanging description... ")
			Set-ADUser $alias -Description "Terminated. No Licenses"
		}
		
		# Checking for Delegate
		
		If ($DelegateAccessYes.Checked -eq $true)
		{
			Add-MailboxPermission -Identity $termedUser -User $delegUser -AccessRights FullAccess -InheritanceType All -AutoMapping $true
		}
		
		### CHECKBOX GROUP ###
		
		If ($DisableAccountOption.Checked -eq $true)
		{
			#Disable AD Account
			$output.AppendText("`nDisabling ActiveDirectory Account... ")
			Disable-ADAccount $alias
			$output.AppendText("done.")
			
			# Block Sign-In to Office 365 
			$output.AppendText("`nBlocking sign-in access to Office 365... ")
			Set-MsolUser -UserPrincipalName $termedUser -BlockCredential $True
			$output.AppendText("done.")
		}
		
		If ($RemoveFromDGOption.Checked -eq $True)
		{
			# Remove from ALL Distribution Groups. 
			$output.AppendText("`nRemoving user from all Distribution Groups... ")
			try
			{
				Get-ADPrincipalGroupMembership -Identity $alias | where { $_.Name -notlike "Domain Users" } | % {Remove-ADPrincipalGroupMembership -Identity $alias -MemberOf $_ -Confirm:$false}
			}
			catch
			{
				$output.AppendText("`nError occured, group removal failed. Please manually remove from groups.")
			}
		}
	
		if ($ChangePasswordOption.Checked -eq $True)
		{
			$output.AppendText("`nGenerating randomized password and applying... ")
			$newpass = generate-password("Strong")
			$newpass = ConvertTo-SecureString -String $newpass -AsPlainText -Force
			Set-ADAccountPassword -Identity $alias -NewPassword $newpass
		}
		if ($RemoveLicenseOption.Checked -eq $True)
		{
			# Remove any licenses assigned, all of em.
			try
			{
				$output.appendtext("`nRemoving all Office365 Licenses... ")
				(get-MsolUser -UserPrincipalName $termedUser).licenses.AccountSkuId |
				%{
					Set-MsolUserLicense -UserPrincipalName $termedUser -RemoveLicenses $_
				}
			}
			catch
			{
				$output.appendtext("error. Please verify that you've successfully logged into the Azure Tenant.")
			}
			$output.AppendText("done.")
		}
		
		if ($DisableASOWAOption.Checked -eq $True)
		{
			#Disable ActiveSync and OWA for Mobile Devices
			$output.AppendText("`nDisabling ActiveSync and OWA for MobileDevices... ")
			Set-CASMailbox -Identity $termedUser -OWAEnabled $false -PopEnabled $false -OWAforDevicesEnabled $false -ActiveSyncEnabled $false
		}
		# Hides from GAL
		
		$user = Get-ADUser $alias -Properties *
		$user.MsExchHideFromAddressLists = "True"
		Set-ADUser -Instance $user
		$output.AppendText("done.`nHiding from Global Address List... ")
		
		
		# Moves to Disabled User Accounts OU
		$output.AppendText("done.`nMoving to Disabled User Accounts OU... ")
		$DisabledOU = "OU=Disabled User Accounts,DC=sales,DC=verrents,DC=com"
		Get-ADUser $alias | Move-AdObject -TargetPath $DisabledOU
		
		# Saves a log of work done
		$output.AppendText("done.`n$termedUser has been disabled.")
		
		# Then this grabs todays date in Year-Month-Day format
		$today = Get-Date -UFormat "%Y-%m-%d"
		
		# Then we concatenate the two together
		$filename = $alias + $today
		$output.AppendText("`nSaving termination run to log folder.")
		
		<#This grabs all of the appended text from the job run and then it saves it to the Disabled User Logs folder. This folder is created when you first run the program.
		I'll add a button later to make it at your request. or better yet, add the option to save it where you want.#>
		$output.text | Out-File "\\dc1archive01\UTL\$filename.txt"
		$now = Get-Date
		Add-Content "\\dc1archive01\UTL\$filename.txt" "`nTermination carried out by $global:loggedinas on $now"
	}
	
	function get-groupdetail{
		$GroupDescription.Text = (Get-Unifiedgroup -identity $listGroups.SelectedItem).Notes
		$GroupOwner.Text = (Get-UnifiedGroup -Identity $listGroups.SelectedItem).ManagedBy
		$GMems = Get-UnifiedGroupLinks $listGroups.SelectedItem -LinkType Members | Select-Object -ExpandProperty Name
		foreach($member in $GMems){$GroupMembers.AppendText("`n$member")}
		$GroupHiddenStatus.Text = (Get-UnifiedGroup $listGroups.SelectedItem).HiddenFromAddressListsEnabled
	}
	
	function run-groupoption{
		if ($groupControlViewOption.Checked -eq $true)
		{
			get-groupdetail
		}
		
		elseif ($groupControlHideOption.Checked -eq $True)
		{
			Set-UnifiedGroup $listGroups.SelectedItem -HiddenFromAddressListsEnabled = $true
			$GroupHiddenStatus.Text = (Get-UnifiedGroup $listGroups.SelectedItem).HiddenFromAddressListsEnabled
		}
		
		elseif ($groupControlDeleteOption.Checked -eq $True)
		{
			Remove-UnifiedGroup -Identity $listGroups.SelectedItem
		}
		else
		{
			[System.Windows.Forms.MessageBox]::Show('No action selected.','Pick something!','OK','Error')
		}
	}
	
	function generate-password([string]$strong){
		If ($strong -match "Domain")
		{
			#$output.AppendText("`nGenerating randomized password and applying... ")
			$a = -join ((64 .. 90) + (97 .. 122) | Get-Random -Count 6 | %{ [char]$_ }) #<-- Random letters. Picks an integer between 65 and 90(lower) and 97-122(caps) and then matches that to its ASCII code in char to generate a letter. 
			$b = (0000 .. 9999) | Get-Random -Count 1
			$password = $a + $b
			return $password
		}
		Elseif ($strong -eq "Strong")
		{
			$password = -join ((48 .. 57) + (63) + (64 .. 90) + (33) + (35 .. 38) + (40 .. 43) + (97 .. 122) | Get-Random -Count 16 | %{ [char]$_ })
			return $password
		}
		elseif ($strong -eq "REV")
		{
			$a = (1000 .. 9999) | Get-Random -Count 1 #<-- Random lumber, between 1000-9999. Only run once.
			$b = -join ((35 .. 38) + (40 .. 43) + (63 .. 64) + 33 | Get-Random -Count 2 | %{ [char]$_ })
			$c = "Video"
			$password  = $a.ToString() + $b.ToString() + $c
			return $password
		}
	
		elseif ($strong -ge 1 -and $strong -le 65)
		{
			$a = -join ((48 .. 57) + (63) + (64 .. 90) + (33) + (35 .. 38) + (40 .. 43) + (97 .. 122) | Get-Random -Count $strong | %{ [char]$_ })
			return $a
		}
		
		else
		{
			$output.AppendText("`nInvalid Input.")
			return
		}
	}
	
	function Show-Inputbox{
		Param ([string]$message=$(Throw "You must enter a prompt message"),
			[string]$title = "Password Length Selector",
			[string]$default)
		[reflection.assembly]::loadwithpartialname("microsoft.visualbasic") | Out-Null
		[microsoft.visualbasic.interaction]::InputBox($message, $title, $default)
	}
	
#endregion Source: Globals.ps1

#region Source: GUI.psf
function Show-GUI_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$GUI = New-Object 'System.Windows.Forms.Form'
	$labelAdminEmail = New-Object 'System.Windows.Forms.Label'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$labelAdminPassword = New-Object 'System.Windows.Forms.Label'
	$output = New-Object 'System.Windows.Forms.RichTextBox'
	$adminPassword = New-Object 'System.Windows.Forms.TextBox'
	$adminEmail = New-Object 'System.Windows.Forms.TextBox'
	$buttonLogin = New-Object 'System.Windows.Forms.Button'
	$PrimaryTabGroup = New-Object 'System.Windows.Forms.TabControl'
	$CreateUserTab = New-Object 'System.Windows.Forms.TabPage'
	$labelAliasAvailable = New-Object 'System.Windows.Forms.Label'
	$labelAliasExists = New-Object 'System.Windows.Forms.Label'
	$buttonClearFields = New-Object 'System.Windows.Forms.Button'
	$dn = New-Object 'System.Windows.Forms.TextBox'
	$buttonCreateUser = New-Object 'System.Windows.Forms.Button'
	$labelDisplayName = New-Object 'System.Windows.Forms.Label'
	$labelSelectOU = New-Object 'System.Windows.Forms.Label'
	$createUserDisplayName = New-Object 'System.Windows.Forms.TextBox'
	$OUView = New-Object 'System.Windows.Forms.TreeView'
	$createUserUPN = New-Object 'System.Windows.Forms.TextBox'
	$labelUserPrincipalName = New-Object 'System.Windows.Forms.Label'
	$createUserAlias = New-Object 'System.Windows.Forms.TextBox'
	$labelAlias = New-Object 'System.Windows.Forms.Label'
	$createUserLN = New-Object 'System.Windows.Forms.TextBox'
	$labelLastName = New-Object 'System.Windows.Forms.Label'
	$createUserFN = New-Object 'System.Windows.Forms.TextBox'
	$labelFirstName = New-Object 'System.Windows.Forms.Label'
	$TermianteUserTab = New-Object 'System.Windows.Forms.TabPage'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$RemoveLicenseOption = New-Object 'System.Windows.Forms.CheckBox'
	$ChangePasswordOption = New-Object 'System.Windows.Forms.CheckBox'
	$DisableAccountOption = New-Object 'System.Windows.Forms.CheckBox'
	$DisableASOWAOption = New-Object 'System.Windows.Forms.CheckBox'
	$RemoveFromDGOption = New-Object 'System.Windows.Forms.CheckBox'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$DelegateAccessNo = New-Object 'System.Windows.Forms.RadioButton'
	$DelegateAccessYes = New-Object 'System.Windows.Forms.RadioButton'
	$DelegateUser = New-Object 'System.Windows.Forms.TextBox'
	$DelegateAccessLabel = New-Object 'System.Windows.Forms.Label'
	$buttonCheckLicenses = New-Object 'System.Windows.Forms.Button'
	$buttonTerminateUser = New-Object 'System.Windows.Forms.Button'
	$ForwardUser = New-Object 'System.Windows.Forms.TextBox'
	$ForwardEmailsTo = New-Object 'System.Windows.Forms.Label'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$EnableForwardingNo = New-Object 'System.Windows.Forms.RadioButton'
	$EnableForwardingYes = New-Object 'System.Windows.Forms.RadioButton'
	$TerminatedUser = New-Object 'System.Windows.Forms.TextBox'
	$labelTerminatedUsersEmail = New-Object 'System.Windows.Forms.Label'
	$calendarTab = New-Object 'System.Windows.Forms.TabPage'
	$labelUserEmailAddress = New-Object 'System.Windows.Forms.Label'
	$CalendarTabInstructions = New-Object 'System.Windows.Forms.Label'
	$emailControl1 = New-Object 'System.Windows.Forms.GroupBox'
	$PresetCalPermsLabel = New-Object 'System.Windows.Forms.Label'
	$calendarPermissions = New-Object 'System.Windows.Forms.ComboBox'
	$buttonCheckPermissions = New-Object 'System.Windows.Forms.Button'
	$calEmail = New-Object 'System.Windows.Forms.Label'
	$UserEmail = New-Object 'System.Windows.Forms.TextBox'
	$CalendarEmail = New-Object 'System.Windows.Forms.TextBox'
	$buttonSetPermissions = New-Object 'System.Windows.Forms.Button'
	$GroupControlTab = New-Object 'System.Windows.Forms.TabPage'
	$groupbox5 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonRunSelection = New-Object 'System.Windows.Forms.Button'
	$GroupControlDeleteOption = New-Object 'System.Windows.Forms.RadioButton'
	$groupControlHideOption = New-Object 'System.Windows.Forms.RadioButton'
	$groupControlViewOption = New-Object 'System.Windows.Forms.RadioButton'
	$groupbox4 = New-Object 'System.Windows.Forms.GroupBox'
	$GroupOwner = New-Object 'System.Windows.Forms.Label'
	$GroupHiddenStatus = New-Object 'System.Windows.Forms.Label'
	$labelHiddenStatus = New-Object 'System.Windows.Forms.Label'
	$labelMembers = New-Object 'System.Windows.Forms.Label'
	$GroupMembers = New-Object 'System.Windows.Forms.RichTextBox'
	$GroupDescription = New-Object 'System.Windows.Forms.RichTextBox'
	$labelGroupOwner = New-Object 'System.Windows.Forms.Label'
	$labelDescription = New-Object 'System.Windows.Forms.Label'
	$listGroups = New-Object 'System.Windows.Forms.ComboBox'
	$labelOffice365Groups = New-Object 'System.Windows.Forms.Label'
	$buttonPopulateList = New-Object 'System.Windows.Forms.Button'
	$SharePointControlTab = New-Object 'System.Windows.Forms.TabPage'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$UpcomingFeatures = New-Object 'System.Windows.Forms.TabPage'
	$labelExpandOffice365Group = New-Object 'System.Windows.Forms.Label'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$fontdialog1 = New-Object 'System.Windows.Forms.FontDialog'
	$HelpDropDown = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$AboutHelp = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$knownBugsHelpMenu = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$QuickCommandsDropDown = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$dirSyncMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$getLastSyncToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$generatePasswordToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$makeNewUserPasswordsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$generateDomainPasswordToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$generateREVPasswordToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$generateStrongPasswordToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$generateCustomPasswordToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$clearConsoleToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$optionsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	#### LAUNCH SEQUENCE ###
	
	
	$GUI_Load = {
		$ProgressPreference = 'silentlyContinue'
		Get-PSSession | Remove-PSSession # IF ANY SESSIONS ARE OPEN, CLOSE THEM
		$listGroups.DropDownStyle = 'DropDownList'
		$calendarPermissions.DropDownStyle = 'DropDownList'
		Update-ComboBox $calendarPermissions "Read" -Append
		Update-ComboBox $calendarPermissions "Edit" -Append
		Update-ComboBox $calendarPermissions "Owner" -Append
		Update-ComboBox $calendarPermissions "Remove" -Append
		$rootCN = [adsi]''
		$nodeName = $rootCN.Name
		$key = "LDAP://$($rootCN.DistinguishedName)"
		$OUView.Nodes.Add($key, $nodeName)
		Import-Module ActiveDirectory
	}
	# Login function
	
	## BUTTONS! :D ##
	
	$buttonLogin_Click = {
		login 
	}
	
	$buttonCheckPermissions_Click = {
		$output.Text = "Grabbing calendar information. This window will update once finished.."
		get-calendarPermissions
	}
						
	$buttonSetPermissions_Click = {
		set-calendarPermissions
	}
	
	$EnableForwardingYes_CheckedChanged={
		$ForwardEmailsTo.Enabled = $true
		$ForwardUser.Enabled = $true
	}
	
	$buttonTerminateUser_Click = {
		$name = '{0}' -f $TerminatedUser.Text
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to terminate $name?", `
			0, "Delete Files", 4)
		If ($intAnswer -eq 6)
		{
			terminate-user
		}
		else
		{
			$output.AppendText("`nPlease verify terminated user account to continue.")
		}
	}
	
	$EnableForwardingNo_CheckedChanged = {
		$ForwardEmailsTo.Enabled = $False
		$ForwardUser.Enabled = $False
	}
	
	$buttonCheckLicenses_Click = {
		$check = '{0}' -f $TerminatedUser.Text
		try
		{
			$license_check = Get-MsolUser -UserPrincipalName $check | Select-Object Licenses | Out-String
			$output.AppendText("$license_check")
		}
		catch
		{
			$output.AppendText("`nError. You're not signed into Azure Tenant. Please verify that you have all dependencies installed or are signed in.")	
		}
	
	}
	
	$DelegateAccessYes_CheckedChanged={
		$DelegateAccessLabel.Enabled = $True
		$DelegateUser.Enabled = $True
	}
	
	$DelegateAccessNo_CheckedChanged={
		$DelegateAccessLabel.Enabled = $False
		$DelegateUser.Enabled = $False
		
	}
	
	$adminPassword_KeyDown = [System.Windows.Forms.KeyEventHandler]{
		if ($_.KeyCode -eq 'Enter')
		{
			$buttonLogin.PerformClick()
			$_.SuppressKeyPress = $true
	
		}
	}
	
	<# $adminPassword_KeyDown = [System.Windows.Forms.KeyEventHandler]{
		
		if ($_.KeyCode -eq 'Enter')
		{
			$buttonGetServices_Click.Invoke()
			#Suppress sound from unexpected use of enter on keyPress/keyUp
			$_.SuppressKeyPress = $true
		}
	}#>
	
	$buttonPopulateList_Click = {
		$output.AppendText("`nGetting groups. Please wait..")
		$groups = (get-unifiedgroup -identity *).DisplayName
		Update-ComboBox $listGroups ($groups)
		$output.AppendText("`nDone.")
	}
	
	$AboutHelp_Click={
		[System.Windows.Forms.MessageBox]::Show("Running on Win Forms front end`nBy Christopher Marble`nchris@cdmarble.com`nInteneral Release Build 7", "Office 365 PowerShell GUI Tool");
	}
	
	$buttonGetGroupDetail_Click = {
		get-groupdetail
	}
	
	$adminEmail_TextChanged={
		$loggedInAs = $adminEmail.Text
	}
	
	$knownBugsHelpMenu_Click={
		[System.Windows.Forms.MessageBox]::Show("Hiding from GAL Currently not Working", "Known Bugs")
	}
	
	$buttonDeleteTheGroup_Click={
		[System.Windows.Forms.MessageBox]::Show('>:(')
	}
	
	$UpcomingFeaturesHelp_Click={
		[System.Windows.Forms.MessageBox]::Show("$UpcomingFeaturesMsg", 'Upcoming Features', 'OK')
	}
	
	$dirSyncMenuItem_Click = {
		Invoke-Command -ComputerName $syncServer -ScriptBlock { Start-ADSyncSyncCycle -policytype delta }
		$output.AppendText("`nPerformed DirSync. This should take about 30 seconds to perform.`nYou can check when it's been completed by clicking Get Last Sync.")
	}
	
	$buttonRunSelection_Click={
		run-groupoption
	}
	
	$getLastSyncToolStripMenuItem_Click = {
			$x = Get-MsolCompanyInformation | Select-Object -ExpandProperty LastDirSyncTime
			$output.AppendText("`nDirSync Last Completed:`n$x UTC")
	}
	
	$makeNewUserPasswordsToolStripMenuItem_Click={
		$domainpw = generate-password("Domain")
		$output.AppendText("`nDomain Password: $domainpw")
		$revpw = generate-password("REV")
		$output.AppendText("`nREV Password: $revpw")
	}
	
	$generateDomainPasswordToolStripMenuItem_Click = {
		$password = generate-password("Domain")
		$output.AppendText("`nDomain Password: $password")
	
	}
	
	$generateREVPasswordToolStripMenuItem_Click={
		$password = generate-password("REV")
		$output.AppendText("`nREV Password: $password")
		
	}
	
	$generateStrongPasswordToolStripMenuItem_Click={
		$password = generate-password("Strong")
		$output.AppendText("`nStrong Password: $password")
		
	}
	
	$generateCustomPasswordToolStripMenuItem_Click= {
		$pwlength = Show-Inputbox -message "How do you long do you want your password? Max length: 65" -title "Password Generator" -default 10
		$password = generate-password($pwlength)
		$output.AppendText("`nRandom $pwlength Character Password: $password")
	}
	
	$clearConsoleToolStripMenuItem_Click={
		$output.Text = ""
	}
	
	$optionsToolStripMenuItem_Click={
		Show-Options_psf
	}
	
		$createUserAlias_TextChanged={
			$createUserUPN.Text = $createUserAlias.Text + "@ver.com"
			$checkalias = $createUserAlias.Text
			$searchAlias = [adsisearcher] "(samaccountname=$checkalias)"
			$check = $searchAlias.FindOne()
			if ($check.Count -ge 1)
			{
				$labelAliasExists.Visible = $true
				$labelAliasAvailable.Visible = $false
			}
			else
			{
				$LabelAliasExists.Visible = $false
				$labelAliasAvailable.Visible = $true
			}
			
		}
	
	$createUserFN_TextChanged={
		$createUserAlias.Text = ($createUserFN.Text[0] + $createUserLN.Text).ToLower()
		$createUserDisplayName.Text = $createUserFN.Text + " " + $createUserLN.Text
	}
	
	$createUserLN_TextChanged={
		$createUserAlias.Text = ($createUserFN.Text[0] + $createUserLN.Text).ToLower()
		$createUserDisplayName.Text = $createUserFN.Text + " " + $createUserLN.Text
	}
	
	# Credit to jvierra of the SAPIEN forums for this
	$OUView_NodeMouseClick = [System.Windows.Forms.TreeNodeMouseClickEventHandler]{
		if (-not $_.Node.IsExpanded)
		{
			$thisOU = [adsi]$_.Node.Name
			#$OUDN = $thisOU.DistinguishedName
			#$listbox1.DataSource = [collections.arraylist]@($thisOU.Children)
			if (-not $_.Node.Nodes)
			{
				$dn.Text = $thisOU.DistinguishedName
				$searcher = [adsisearcher]'objectClass=organizationalunit'
				$searcher.SearchRoot = $_.Node.Name
				$searcher.SearchScope = 'OneLevel'
				$searcher.PropertiesToLoad.Add('name')
				$OUs = $searcher.Findall()
				foreach ($ou in $OUs)
				{
					$_.Node.Nodes.Add($ou.Path, $ou.Properties['name'])
				}
			}
			$_.Node.Expand()
		}
		else
		{
			$_.Node.Collapse()
		}
	}
	# Thanks jvierra!
	
	$createUserDisplayName_TextChanged={
		$createUserDisplayName.Text = $createUserFN.Text + " " + $createUserLN.Text	
	}
	
	$buttonCreateUser_Click={
		create-user -name $createUserDisplayName.Text -fn $createUserFN.Text -ln $createUserLN.Text -upn $createUserUPN.Text -ou $dn.Text -alias $createUserAlias.Text
	}
	
	$buttonGetPSSession_Click = {
		$a = Get-PSSession
		$output.AppendText("`n$a")
	}
	
	$checkSessionStatusToolStripMenuItem_Click = {
		$output.AppendText("`nChecking sign-in statuses")
		$ps = Get-PSSession | Select-Object -ExpandProperty Name
		if ($?)
		{
			$output.AppendText("`nCurrent PowerShell Sessions:")
			%($ps){$output.AppendText("`n$_")}
		}
		else
		{
			$output.AppendText("`nNot connected to any PowerShell Session")
		}
		Get-MsolDomain -ErrorAction SilentlyContinue
		if ($?)
		{
			$output.AppendText("`nYou are still connected to Microsoft Online (Azure)")
		}
		else
		{
			$output.AppendText("`nYou are not connected to Microsoft Online")
		?}
	}
	
	$buttonClearFields_Click={
		$createUserFN.Text = ''
		$createUserLN.Text = ''
		$createUserUPN.Text = ''
		$labelAliasAvailable.Visible = $false
	}
	
	
	
	$TerminatedUser_TextChanged= {
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$GUI.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:GUI_output = $output.Text
		$script:GUI_adminPassword = $adminPassword.Text
		$script:GUI_adminEmail = $adminEmail.Text
		$script:GUI_dn = $dn.Text
		$script:GUI_createUserDisplayName = $createUserDisplayName.Text
		if($OUView.SelectedNode -ne $null)
		{
			$script:GUI_OUView = $OUView.SelectedNode.Text
		}
		else
		{
			$script:GUI_OUView = $null
		}
		$script:GUI_createUserUPN = $createUserUPN.Text
		$script:GUI_createUserAlias = $createUserAlias.Text
		$script:GUI_createUserLN = $createUserLN.Text
		$script:GUI_createUserFN = $createUserFN.Text
		$script:GUI_RemoveLicenseOption = $RemoveLicenseOption.Checked
		$script:GUI_ChangePasswordOption = $ChangePasswordOption.Checked
		$script:GUI_DisableAccountOption = $DisableAccountOption.Checked
		$script:GUI_DisableASOWAOption = $DisableASOWAOption.Checked
		$script:GUI_RemoveFromDGOption = $RemoveFromDGOption.Checked
		$script:GUI_DelegateAccessNo = $DelegateAccessNo.Checked
		$script:GUI_DelegateAccessYes = $DelegateAccessYes.Checked
		$script:GUI_DelegateUser = $DelegateUser.Text
		$script:GUI_ForwardUser = $ForwardUser.Text
		$script:GUI_EnableForwardingNo = $EnableForwardingNo.Checked
		$script:GUI_EnableForwardingYes = $EnableForwardingYes.Checked
		$script:GUI_TerminatedUser = $TerminatedUser.Text
		$script:GUI_calendarPermissions = $calendarPermissions.Text
		$script:GUI_calendarPermissions_SelectedItem = $calendarPermissions.SelectedItem
		$script:GUI_UserEmail = $UserEmail.Text
		$script:GUI_CalendarEmail = $CalendarEmail.Text
		$script:GUI_GroupControlDeleteOption = $GroupControlDeleteOption.Checked
		$script:GUI_groupControlHideOption = $groupControlHideOption.Checked
		$script:GUI_groupControlViewOption = $groupControlViewOption.Checked
		$script:GUI_GroupMembers = $GroupMembers.Text
		$script:GUI_GroupDescription = $GroupDescription.Text
		$script:GUI_listGroups = $listGroups.Text
		$script:GUI_listGroups_SelectedItem = $listGroups.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$adminPassword.remove_KeyDown($adminPassword_KeyDown)
			$adminEmail.remove_TextChanged($adminEmail_TextChanged)
			$buttonLogin.remove_Click($buttonLogin_Click)
			$buttonClearFields.remove_Click($buttonClearFields_Click)
			$buttonCreateUser.remove_Click($buttonCreateUser_Click)
			$createUserDisplayName.remove_TextChanged($createUserDisplayName_TextChanged)
			$OUView.remove_NodeMouseClick($OUView_NodeMouseClick)
			$createUserAlias.remove_TextChanged($createUserAlias_TextChanged)
			$createUserLN.remove_TextChanged($createUserLN_TextChanged)
			$createUserFN.remove_TextChanged($createUserFN_TextChanged)
			$DelegateAccessNo.remove_CheckedChanged($DelegateAccessNo_CheckedChanged)
			$DelegateAccessYes.remove_CheckedChanged($DelegateAccessYes_CheckedChanged)
			$buttonCheckLicenses.remove_Click($buttonCheckLicenses_Click)
			$buttonTerminateUser.remove_Click($buttonTerminateUser_Click)
			$EnableForwardingNo.remove_CheckedChanged($EnableForwardingNo_CheckedChanged)
			$EnableForwardingYes.remove_CheckedChanged($EnableForwardingYes_CheckedChanged)
			$TerminatedUser.remove_TextChanged($TerminatedUser_TextChanged)
			$buttonCheckPermissions.remove_Click($buttonCheckPermissions_Click)
			$buttonSetPermissions.remove_Click($buttonSetPermissions_Click)
			$buttonRunSelection.remove_Click($buttonRunSelection_Click)
			$buttonPopulateList.remove_Click($buttonPopulateList_Click)
			$GUI.remove_Load($GUI_Load)
			$AboutHelp.remove_Click($AboutHelp_Click)
			$knownBugsHelpMenu.remove_Click($knownBugsHelpMenu_Click)
			$dirSyncMenuItem.remove_Click($dirSyncMenuItem_Click)
			$getLastSyncToolStripMenuItem.remove_Click($getLastSyncToolStripMenuItem_Click)
			$makeNewUserPasswordsToolStripMenuItem.remove_Click($makeNewUserPasswordsToolStripMenuItem_Click)
			$generateDomainPasswordToolStripMenuItem.remove_Click($generateDomainPasswordToolStripMenuItem_Click)
			$generateREVPasswordToolStripMenuItem.remove_Click($generateREVPasswordToolStripMenuItem_Click)
			$generateStrongPasswordToolStripMenuItem.remove_Click($generateStrongPasswordToolStripMenuItem_Click)
			$generateCustomPasswordToolStripMenuItem.remove_Click($generateCustomPasswordToolStripMenuItem_Click)
			$clearConsoleToolStripMenuItem.remove_Click($clearConsoleToolStripMenuItem_Click)
			$optionsToolStripMenuItem.remove_Click($optionsToolStripMenuItem_Click)
			$GUI.remove_Load($Form_StateCorrection_Load)
			$GUI.remove_Closing($Form_StoreValues_Closing)
			$GUI.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$GUI.SuspendLayout()
	$PrimaryTabGroup.SuspendLayout()
	$CreateUserTab.SuspendLayout()
	$TermianteUserTab.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	$calendarTab.SuspendLayout()
	$emailControl1.SuspendLayout()
	$GroupControlTab.SuspendLayout()
	$groupbox5.SuspendLayout()
	$groupbox4.SuspendLayout()
	$SharePointControlTab.SuspendLayout()
	$UpcomingFeatures.SuspendLayout()
	$menustrip1.SuspendLayout()
	#
	# GUI
	#
	$GUI.Controls.Add($labelAdminEmail)
	$GUI.Controls.Add($picturebox1)
	$GUI.Controls.Add($labelAdminPassword)
	$GUI.Controls.Add($output)
	$GUI.Controls.Add($adminPassword)
	$GUI.Controls.Add($adminEmail)
	$GUI.Controls.Add($buttonLogin)
	$GUI.Controls.Add($PrimaryTabGroup)
	$GUI.Controls.Add($menustrip1)
	$GUI.AutoScaleDimensions = '13, 26'
	$GUI.AutoScaleMode = 'Font'
	$GUI.ClientSize = '1102, 1019'
	$GUI.FormBorderStyle = 'Fixed3D'
	$GUI.Margin = '5, 5, 5, 5'
	$GUI.MaximizeBox = $False
	$GUI.Name = 'GUI'
	$GUI.Text = 'VER Microsoft Office365 Tool'
	$GUI.add_Load($GUI_Load)
	#
	# labelAdminEmail
	#
	$labelAdminEmail.AutoSize = $True
	$labelAdminEmail.Location = '454, 52'
	$labelAdminEmail.Margin = '6, 0, 6, 0'
	$labelAdminEmail.Name = 'labelAdminEmail'
	$labelAdminEmail.Size = '137, 26'
	$labelAdminEmail.TabIndex = 0
	$labelAdminEmail.Text = 'Admin Email'
	#
	# picturebox1
	#
	$picturebox1.ImageLocation = '\\dc1archive01\utl\office365.PNG'
	$picturebox1.Location = '13, 46'
	$picturebox1.Margin = '6, 6, 6, 6'
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = '395, 94'
	$picturebox1.SizeMode = 'StretchImage'
	$picturebox1.TabIndex = 5
	$picturebox1.TabStop = $False
	#
	# labelAdminPassword
	#
	$labelAdminPassword.AutoSize = $True
	$labelAdminPassword.Location = '682, 52'
	$labelAdminPassword.Margin = '6, 0, 6, 0'
	$labelAdminPassword.Name = 'labelAdminPassword'
	$labelAdminPassword.Size = '177, 26'
	$labelAdminPassword.TabIndex = 0
	$labelAdminPassword.Text = 'Admin Password'
	#
	# output
	#
	$output.AccessibleRole = 'None'
	$output.BackColor = 'ActiveCaptionText'
	$output.BorderStyle = 'FixedSingle'
	$output.Font = 'Consolas, 9pt, style=Bold'
	$output.ForeColor = 'LightGreen'
	$output.Location = '6, 580'
	$output.Margin = '6, 6, 6, 6'
	$output.Name = 'output'
	$output.ReadOnly = $True
	$output.ScrollBars = 'Vertical'
	$output.ShowSelectionMargin = $True
	$output.Size = '1090, 430'
	$output.TabIndex = 0
	$output.Text = ''
	#
	# adminPassword
	#
	$adminPassword.ImeMode = 'NoControl'
	$adminPassword.Location = '682, 84'
	$adminPassword.Margin = '6, 6, 6, 6'
	$adminPassword.Name = 'adminPassword'
	$adminPassword.PasswordChar = '●'
	$adminPassword.Size = '212, 32'
	$adminPassword.TabIndex = 2
	$adminPassword.add_KeyDown($adminPassword_KeyDown)
	#
	# adminEmail
	#
	$adminEmail.Location = '454, 84'
	$adminEmail.Margin = '6, 6, 6, 6'
	$adminEmail.Name = 'adminEmail'
	$adminEmail.Size = '212, 32'
	$adminEmail.TabIndex = 1
	$adminEmail.add_TextChanged($adminEmail_TextChanged)
	#
	# buttonLogin
	#
	$buttonLogin.Location = '906, 84'
	$buttonLogin.Margin = '6, 6, 6, 6'
	$buttonLogin.Name = 'buttonLogin'
	$buttonLogin.Size = '148, 35'
	$buttonLogin.TabIndex = 3
	$buttonLogin.Text = 'Login'
	$buttonLogin.UseVisualStyleBackColor = $True
	$buttonLogin.add_Click($buttonLogin_Click)
	#
	# PrimaryTabGroup
	#
	$PrimaryTabGroup.Controls.Add($CreateUserTab)
	$PrimaryTabGroup.Controls.Add($TermianteUserTab)
	$PrimaryTabGroup.Controls.Add($calendarTab)
	$PrimaryTabGroup.Controls.Add($GroupControlTab)
	$PrimaryTabGroup.Controls.Add($SharePointControlTab)
	$PrimaryTabGroup.Controls.Add($UpcomingFeatures)
	$PrimaryTabGroup.Location = '6, 152'
	$PrimaryTabGroup.Margin = '6, 6, 6, 6'
	$PrimaryTabGroup.Name = 'PrimaryTabGroup'
	$PrimaryTabGroup.SelectedIndex = 0
	$PrimaryTabGroup.Size = '1089, 416'
	$PrimaryTabGroup.TabIndex = 0
	#
	# CreateUserTab
	#
	$CreateUserTab.Controls.Add($labelAliasAvailable)
	$CreateUserTab.Controls.Add($labelAliasExists)
	$CreateUserTab.Controls.Add($buttonClearFields)
	$CreateUserTab.Controls.Add($dn)
	$CreateUserTab.Controls.Add($buttonCreateUser)
	$CreateUserTab.Controls.Add($labelDisplayName)
	$CreateUserTab.Controls.Add($labelSelectOU)
	$CreateUserTab.Controls.Add($createUserDisplayName)
	$CreateUserTab.Controls.Add($OUView)
	$CreateUserTab.Controls.Add($createUserUPN)
	$CreateUserTab.Controls.Add($labelUserPrincipalName)
	$CreateUserTab.Controls.Add($createUserAlias)
	$CreateUserTab.Controls.Add($labelAlias)
	$CreateUserTab.Controls.Add($createUserLN)
	$CreateUserTab.Controls.Add($labelLastName)
	$CreateUserTab.Controls.Add($createUserFN)
	$CreateUserTab.Controls.Add($labelFirstName)
	$CreateUserTab.BackColor = 'Control'
	$CreateUserTab.Location = '8, 40'
	$CreateUserTab.Margin = '6, 6, 6, 6'
	$CreateUserTab.Name = 'CreateUserTab'
	$CreateUserTab.Padding = '4, 4, 4, 4'
	$CreateUserTab.Size = '1073, 368'
	$CreateUserTab.TabIndex = 5
	$CreateUserTab.Text = 'Create User'
	#
	# labelAliasAvailable
	#
	$labelAliasAvailable.AutoSize = $True
	$labelAliasAvailable.ForeColor = 'LimeGreen'
	$labelAliasAvailable.Location = '109, 164'
	$labelAliasAvailable.Margin = '6, 0, 6, 0'
	$labelAliasAvailable.Name = 'labelAliasAvailable'
	$labelAliasAvailable.Size = '155, 26'
	$labelAliasAvailable.TabIndex = 20
	$labelAliasAvailable.Text = 'Alias Available'
	$labelAliasAvailable.Visible = $False
	#
	# labelAliasExists
	#
	$labelAliasExists.AutoSize = $True
	$labelAliasExists.ForeColor = 'Red'
	$labelAliasExists.Location = '139, 164'
	$labelAliasExists.Margin = '6, 0, 6, 0'
	$labelAliasExists.Name = 'labelAliasExists'
	$labelAliasExists.Size = '125, 26'
	$labelAliasExists.TabIndex = 19
	$labelAliasExists.Text = 'Alias Exists'
	$labelAliasExists.Visible = $False
	#
	# buttonClearFields
	#
	$buttonClearFields.Location = '397, 251'
	$buttonClearFields.Margin = '6, 6, 6, 6'
	$buttonClearFields.Name = 'buttonClearFields'
	$buttonClearFields.Size = '171, 46'
	$buttonClearFields.TabIndex = 18
	$buttonClearFields.Text = 'Clear Fields'
	$buttonClearFields.UseVisualStyleBackColor = $True
	$buttonClearFields.add_Click($buttonClearFields_Click)
	#
	# dn
	#
	$dn.BorderStyle = 'None'
	$dn.Enabled = $False
	$dn.Location = '21, 333'
	$dn.Margin = '6, 6, 6, 6'
	$dn.Name = 'dn'
	$dn.ReadOnly = $True
	$dn.Size = '547, 25'
	$dn.TabIndex = 17
	#
	# buttonCreateUser
	#
	$buttonCreateUser.Location = '18, 251'
	$buttonCreateUser.Margin = '6, 6, 6, 6'
	$buttonCreateUser.Name = 'buttonCreateUser'
	$buttonCreateUser.Size = '171, 46'
	$buttonCreateUser.TabIndex = 9
	$buttonCreateUser.Text = 'Create User'
	$buttonCreateUser.UseVisualStyleBackColor = $True
	$buttonCreateUser.add_Click($buttonCreateUser_Click)
	#
	# labelDisplayName
	#
	$labelDisplayName.AutoSize = $True
	$labelDisplayName.Location = '21, 85'
	$labelDisplayName.Margin = '6, 0, 6, 0'
	$labelDisplayName.Name = 'labelDisplayName'
	$labelDisplayName.Size = '155, 26'
	$labelDisplayName.TabIndex = 11
	$labelDisplayName.Text = 'Display Name:'
	#
	# labelSelectOU
	#
	$labelSelectOU.AutoSize = $True
	$labelSelectOU.Location = '582, 9'
	$labelSelectOU.Margin = '6, 0, 6, 0'
	$labelSelectOU.Name = 'labelSelectOU'
	$labelSelectOU.Size = '112, 26'
	$labelSelectOU.TabIndex = 10
	$labelSelectOU.Text = 'Select OU'
	#
	# createUserDisplayName
	#
	$createUserDisplayName.Location = '21, 116'
	$createUserDisplayName.Margin = '6, 6, 6, 6'
	$createUserDisplayName.Name = 'createUserDisplayName'
	$createUserDisplayName.Size = '547, 32'
	$createUserDisplayName.TabIndex = 3
	$createUserDisplayName.add_TextChanged($createUserDisplayName_TextChanged)
	#
	# OUView
	#
	$OUView.Location = '582, 41'
	$OUView.Margin = '6, 6, 6, 6'
	$OUView.Name = 'OUView'
	$OUView.Size = '470, 319'
	$OUView.TabIndex = 8
	$OUView.add_NodeMouseClick($OUView_NodeMouseClick)
	#
	# createUserUPN
	#
	$createUserUPN.Location = '289, 196'
	$createUserUPN.Margin = '6, 6, 6, 6'
	$createUserUPN.Name = 'createUserUPN'
	$createUserUPN.Size = '279, 32'
	$createUserUPN.TabIndex = 5
	#
	# labelUserPrincipalName
	#
	$labelUserPrincipalName.AutoSize = $True
	$labelUserPrincipalName.Location = '289, 164'
	$labelUserPrincipalName.Margin = '6, 0, 6, 0'
	$labelUserPrincipalName.Name = 'labelUserPrincipalName'
	$labelUserPrincipalName.Size = '219, 26'
	$labelUserPrincipalName.TabIndex = 6
	$labelUserPrincipalName.Text = 'User Principal Name:'
	#
	# createUserAlias
	#
	$createUserAlias.Location = '21, 195'
	$createUserAlias.Margin = '8, 8, 8, 8'
	$createUserAlias.Name = 'createUserAlias'
	$createUserAlias.Size = '243, 32'
	$createUserAlias.TabIndex = 4
	$createUserAlias.add_TextChanged($createUserAlias_TextChanged)
	#
	# labelAlias
	#
	$labelAlias.AutoSize = $True
	$labelAlias.Location = '21, 164'
	$labelAlias.Margin = '8, 0, 8, 0'
	$labelAlias.Name = 'labelAlias'
	$labelAlias.Size = '66, 26'
	$labelAlias.TabIndex = 4
	$labelAlias.Text = 'Alias:'
	#
	# createUserLN
	#
	$createUserLN.Location = '289, 42'
	$createUserLN.Margin = '8, 8, 8, 8'
	$createUserLN.Name = 'createUserLN'
	$createUserLN.Size = '279, 32'
	$createUserLN.TabIndex = 2
	$createUserLN.add_TextChanged($createUserLN_TextChanged)
	#
	# labelLastName
	#
	$labelLastName.AutoSize = $True
	$labelLastName.Location = '289, 11'
	$labelLastName.Margin = '8, 0, 8, 0'
	$labelLastName.Name = 'labelLastName'
	$labelLastName.Size = '124, 26'
	$labelLastName.TabIndex = 2
	$labelLastName.Text = 'Last Name:'
	#
	# createUserFN
	#
	$createUserFN.Location = '21, 42'
	$createUserFN.Margin = '8, 8, 8, 8'
	$createUserFN.Name = 'createUserFN'
	$createUserFN.Size = '243, 32'
	$createUserFN.TabIndex = 1
	$createUserFN.add_TextChanged($createUserFN_TextChanged)
	#
	# labelFirstName
	#
	$labelFirstName.AutoSize = $True
	$labelFirstName.Location = '21, 11'
	$labelFirstName.Margin = '8, 0, 8, 0'
	$labelFirstName.Name = 'labelFirstName'
	$labelFirstName.Size = '125, 26'
	$labelFirstName.TabIndex = 0
	$labelFirstName.Text = 'First Name:'
	#
	# TermianteUserTab
	#
	$TermianteUserTab.Controls.Add($groupbox3)
	$TermianteUserTab.Controls.Add($groupbox2)
	$TermianteUserTab.Controls.Add($DelegateUser)
	$TermianteUserTab.Controls.Add($DelegateAccessLabel)
	$TermianteUserTab.Controls.Add($buttonCheckLicenses)
	$TermianteUserTab.Controls.Add($buttonTerminateUser)
	$TermianteUserTab.Controls.Add($ForwardUser)
	$TermianteUserTab.Controls.Add($ForwardEmailsTo)
	$TermianteUserTab.Controls.Add($groupbox1)
	$TermianteUserTab.Controls.Add($TerminatedUser)
	$TermianteUserTab.Controls.Add($labelTerminatedUsersEmail)
	$TermianteUserTab.BackColor = 'Control'
	$TermianteUserTab.Location = '8, 40'
	$TermianteUserTab.Margin = '6, 6, 6, 6'
	$TermianteUserTab.Name = 'TermianteUserTab'
	$TermianteUserTab.Padding = '3, 3, 3, 3'
	$TermianteUserTab.Size = '1073, 368'
	$TermianteUserTab.TabIndex = 1
	$TermianteUserTab.Text = 'Terminate User'
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($RemoveLicenseOption)
	$groupbox3.Controls.Add($ChangePasswordOption)
	$groupbox3.Controls.Add($DisableAccountOption)
	$groupbox3.Controls.Add($DisableASOWAOption)
	$groupbox3.Controls.Add($RemoveFromDGOption)
	$groupbox3.Location = '9, 9'
	$groupbox3.Margin = '6, 6, 6, 6'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Padding = '6, 6, 6, 6'
	$groupbox3.Size = '315, 350'
	$groupbox3.TabIndex = 24
	$groupbox3.TabStop = $False
	$groupbox3.Text = 'Termination Options'
	#
	# RemoveLicenseOption
	#
	$RemoveLicenseOption.Location = '22, 105'
	$RemoveLicenseOption.Margin = '6, 6, 6, 6'
	$RemoveLicenseOption.Name = 'RemoveLicenseOption'
	$RemoveLicenseOption.RightToLeft = 'No'
	$RemoveLicenseOption.Size = '261, 48'
	$RemoveLicenseOption.TabIndex = 20
	$RemoveLicenseOption.Text = 'Remove Licenses'
	$RemoveLicenseOption.UseVisualStyleBackColor = $True
	#
	# ChangePasswordOption
	#
	$ChangePasswordOption.Checked = $True
	$ChangePasswordOption.CheckState = 'Checked'
	$ChangePasswordOption.Location = '22, 156'
	$ChangePasswordOption.Margin = '6, 6, 6, 6'
	$ChangePasswordOption.Name = 'ChangePasswordOption'
	$ChangePasswordOption.RightToLeft = 'No'
	$ChangePasswordOption.Size = '261, 48'
	$ChangePasswordOption.TabIndex = 23
	$ChangePasswordOption.Text = 'Change Password'
	$ChangePasswordOption.UseVisualStyleBackColor = $True
	#
	# DisableAccountOption
	#
	$DisableAccountOption.Checked = $True
	$DisableAccountOption.CheckState = 'Checked'
	$DisableAccountOption.Location = '22, 54'
	$DisableAccountOption.Margin = '6, 6, 6, 6'
	$DisableAccountOption.Name = 'DisableAccountOption'
	$DisableAccountOption.RightToLeft = 'No'
	$DisableAccountOption.Size = '261, 48'
	$DisableAccountOption.TabIndex = 19
	$DisableAccountOption.Text = 'Disable Account'
	$DisableAccountOption.UseVisualStyleBackColor = $True
	#
	# DisableASOWAOption
	#
	$DisableASOWAOption.Checked = $True
	$DisableASOWAOption.CheckState = 'Checked'
	$DisableASOWAOption.Location = '22, 207'
	$DisableASOWAOption.Margin = '6, 6, 6, 6'
	$DisableASOWAOption.Name = 'DisableASOWAOption'
	$DisableASOWAOption.RightToLeft = 'No'
	$DisableASOWAOption.Size = '261, 48'
	$DisableASOWAOption.TabIndex = 21
	$DisableASOWAOption.Text = 'Disable AS/OWA'
	$DisableASOWAOption.UseVisualStyleBackColor = $True
	#
	# RemoveFromDGOption
	#
	$RemoveFromDGOption.Checked = $True
	$RemoveFromDGOption.CheckState = 'Checked'
	$RemoveFromDGOption.Location = '22, 258'
	$RemoveFromDGOption.Margin = '6, 6, 6, 6'
	$RemoveFromDGOption.Name = 'RemoveFromDGOption'
	$RemoveFromDGOption.RightToLeft = 'No'
	$RemoveFromDGOption.Size = '281, 63'
	$RemoveFromDGOption.TabIndex = 22
	$RemoveFromDGOption.Text = 'Remove from Distribution Groups'
	$RemoveFromDGOption.UseVisualStyleBackColor = $True
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($DelegateAccessNo)
	$groupbox2.Controls.Add($DelegateAccessYes)
	$groupbox2.Location = '766, 173'
	$groupbox2.Margin = '6, 6, 6, 6'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Padding = '6, 6, 6, 6'
	$groupbox2.Size = '267, 142'
	$groupbox2.TabIndex = 0
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'Delegate Access?'
	#
	# DelegateAccessNo
	#
	$DelegateAccessNo.Checked = $True
	$DelegateAccessNo.Location = '12, 77'
	$DelegateAccessNo.Margin = '6, 6, 6, 6'
	$DelegateAccessNo.Name = 'DelegateAccessNo'
	$DelegateAccessNo.Size = '101, 48'
	$DelegateAccessNo.TabIndex = 12
	$DelegateAccessNo.TabStop = $True
	$DelegateAccessNo.Text = 'No'
	$DelegateAccessNo.UseVisualStyleBackColor = $True
	$DelegateAccessNo.add_CheckedChanged($DelegateAccessNo_CheckedChanged)
	#
	# DelegateAccessYes
	#
	$DelegateAccessYes.Location = '12, 29'
	$DelegateAccessYes.Margin = '6, 6, 6, 6'
	$DelegateAccessYes.Name = 'DelegateAccessYes'
	$DelegateAccessYes.Size = '98, 48'
	$DelegateAccessYes.TabIndex = 11
	$DelegateAccessYes.Text = 'Yes'
	$DelegateAccessYes.UseVisualStyleBackColor = $True
	$DelegateAccessYes.add_CheckedChanged($DelegateAccessYes_CheckedChanged)
	#
	# DelegateUser
	#
	$DelegateUser.Enabled = $False
	$DelegateUser.Location = '426, 211'
	$DelegateUser.Margin = '6, 6, 6, 6'
	$DelegateUser.Name = 'DelegateUser'
	$DelegateUser.Size = '246, 32'
	$DelegateUser.TabIndex = 6
	#
	# DelegateAccessLabel
	#
	$DelegateAccessLabel.AutoSize = $True
	$DelegateAccessLabel.Enabled = $False
	$DelegateAccessLabel.Location = '451, 173'
	$DelegateAccessLabel.Margin = '6, 0, 6, 0'
	$DelegateAccessLabel.Name = 'DelegateAccessLabel'
	$DelegateAccessLabel.Size = '206, 26'
	$DelegateAccessLabel.TabIndex = 1
	$DelegateAccessLabel.Text = 'Delegate Access To'
	#
	# buttonCheckLicenses
	#
	$buttonCheckLicenses.Location = '402, 313'
	$buttonCheckLicenses.Margin = '6, 6, 6, 6'
	$buttonCheckLicenses.Name = 'buttonCheckLicenses'
	$buttonCheckLicenses.Size = '295, 46'
	$buttonCheckLicenses.TabIndex = 8
	$buttonCheckLicenses.Text = 'Check Licenses'
	$buttonCheckLicenses.UseVisualStyleBackColor = $True
	$buttonCheckLicenses.add_Click($buttonCheckLicenses_Click)
	#
	# buttonTerminateUser
	#
	$buttonTerminateUser.Location = '402, 255'
	$buttonTerminateUser.Margin = '6, 6, 6, 6'
	$buttonTerminateUser.Name = 'buttonTerminateUser'
	$buttonTerminateUser.Size = '295, 46'
	$buttonTerminateUser.TabIndex = 7
	$buttonTerminateUser.Text = 'Terminate User'
	$buttonTerminateUser.UseVisualStyleBackColor = $True
	$buttonTerminateUser.add_Click($buttonTerminateUser_Click)
	#
	# ForwardUser
	#
	$ForwardUser.Enabled = $False
	$ForwardUser.Location = '426, 129'
	$ForwardUser.Margin = '6, 6, 6, 6'
	$ForwardUser.Name = 'ForwardUser'
	$ForwardUser.Size = '246, 32'
	$ForwardUser.TabIndex = 5
	#
	# ForwardEmailsTo
	#
	$ForwardEmailsTo.AutoSize = $True
	$ForwardEmailsTo.Location = '451, 91'
	$ForwardEmailsTo.Margin = '6, 0, 6, 0'
	$ForwardEmailsTo.Name = 'ForwardEmailsTo'
	$ForwardEmailsTo.Size = '200, 26'
	$ForwardEmailsTo.TabIndex = 5
	$ForwardEmailsTo.Text = 'Forward Emails To:'
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($EnableForwardingNo)
	$groupbox1.Controls.Add($EnableForwardingYes)
	$groupbox1.Location = '766, 13'
	$groupbox1.Margin = '6, 6, 6, 6'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Padding = '6, 6, 6, 6'
	$groupbox1.Size = '267, 139'
	$groupbox1.TabIndex = 0
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Forward Emails?'
	#
	# EnableForwardingNo
	#
	$EnableForwardingNo.Checked = $True
	$EnableForwardingNo.Location = '12, 78'
	$EnableForwardingNo.Margin = '6, 6, 6, 6'
	$EnableForwardingNo.Name = 'EnableForwardingNo'
	$EnableForwardingNo.Size = '98, 47'
	$EnableForwardingNo.TabIndex = 10
	$EnableForwardingNo.TabStop = $True
	$EnableForwardingNo.Text = 'No'
	$EnableForwardingNo.UseVisualStyleBackColor = $True
	$EnableForwardingNo.add_CheckedChanged($EnableForwardingNo_CheckedChanged)
	#
	# EnableForwardingYes
	#
	$EnableForwardingYes.Location = '12, 28'
	$EnableForwardingYes.Margin = '6, 6, 6, 6'
	$EnableForwardingYes.Name = 'EnableForwardingYes'
	$EnableForwardingYes.Size = '98, 48'
	$EnableForwardingYes.TabIndex = 9
	$EnableForwardingYes.Text = 'Yes'
	$EnableForwardingYes.UseVisualStyleBackColor = $True
	$EnableForwardingYes.add_CheckedChanged($EnableForwardingYes_CheckedChanged)
	#
	# TerminatedUser
	#
	$TerminatedUser.Location = '426, 47'
	$TerminatedUser.Margin = '6, 6, 6, 6'
	$TerminatedUser.Name = 'TerminatedUser'
	$TerminatedUser.Size = '246, 32'
	$TerminatedUser.TabIndex = 4
	$TerminatedUser.add_TextChanged($TerminatedUser_TextChanged)
	#
	# labelTerminatedUsersEmail
	#
	$labelTerminatedUsersEmail.AutoSize = $True
	$labelTerminatedUsersEmail.Location = '426, 9'
	$labelTerminatedUsersEmail.Margin = '6, 0, 6, 0'
	$labelTerminatedUsersEmail.Name = 'labelTerminatedUsersEmail'
	$labelTerminatedUsersEmail.Size = '246, 26'
	$labelTerminatedUsersEmail.TabIndex = 0
	$labelTerminatedUsersEmail.Text = 'Terminated Users Email'
	#
	# calendarTab
	#
	$calendarTab.Controls.Add($labelUserEmailAddress)
	$calendarTab.Controls.Add($CalendarTabInstructions)
	$calendarTab.Controls.Add($emailControl1)
	$calendarTab.Controls.Add($buttonCheckPermissions)
	$calendarTab.Controls.Add($calEmail)
	$calendarTab.Controls.Add($UserEmail)
	$calendarTab.Controls.Add($CalendarEmail)
	$calendarTab.Controls.Add($buttonSetPermissions)
	$calendarTab.BackColor = 'Control'
	$calendarTab.Location = '8, 40'
	$calendarTab.Margin = '6, 6, 6, 6'
	$calendarTab.Name = 'calendarTab'
	$calendarTab.Padding = '3, 3, 3, 3'
	$calendarTab.Size = '1073, 368'
	$calendarTab.TabIndex = 0
	$calendarTab.Text = 'Calendar Permissions'
	$calendarTab.ToolTipText = ':D'
	#
	# labelUserEmailAddress
	#
	$labelUserEmailAddress.AutoSize = $True
	$labelUserEmailAddress.Location = '723, 120'
	$labelUserEmailAddress.Margin = '6, 0, 6, 0'
	$labelUserEmailAddress.Name = 'labelUserEmailAddress'
	$labelUserEmailAddress.Size = '206, 26'
	$labelUserEmailAddress.TabIndex = 9
	$labelUserEmailAddress.Text = 'User Email Address'
	#
	# CalendarTabInstructions
	#
	$CalendarTabInstructions.Location = '9, 36'
	$CalendarTabInstructions.Margin = '6, 0, 6, 0'
	$CalendarTabInstructions.Name = 'CalendarTabInstructions'
	$CalendarTabInstructions.Size = '385, 306'
	$CalendarTabInstructions.TabIndex = 0
	$CalendarTabInstructions.Text = 'Type the persons name you''re interested in adding into the Target User field and type the calendar you wish to add them to in the Calendar Address field. 

If you wish to check the permissions of an existing calendar, type the calendar in question to the Calendar Address section and click Check Permissions.'
	#
	# emailControl1
	#
	$emailControl1.Controls.Add($PresetCalPermsLabel)
	$emailControl1.Controls.Add($calendarPermissions)
	$emailControl1.Location = '393, 9'
	$emailControl1.Margin = '6, 6, 6, 6'
	$emailControl1.Name = 'emailControl1'
	$emailControl1.Padding = '6, 6, 6, 6'
	$emailControl1.Size = '300, 311'
	$emailControl1.TabIndex = 7
	$emailControl1.TabStop = $False
	$emailControl1.Text = 'Mailbox Permissions'
	#
	# PresetCalPermsLabel
	#
	$PresetCalPermsLabel.AutoSize = $True
	$PresetCalPermsLabel.Location = '12, 31'
	$PresetCalPermsLabel.Margin = '6, 0, 6, 0'
	$PresetCalPermsLabel.Name = 'PresetCalPermsLabel'
	$PresetCalPermsLabel.Size = '75, 26'
	$PresetCalPermsLabel.TabIndex = 1
	$PresetCalPermsLabel.Text = 'Preset'
	#
	# calendarPermissions
	#
	$calendarPermissions.FormattingEnabled = $True
	$calendarPermissions.Location = '12, 72'
	$calendarPermissions.Margin = '6, 6, 6, 6'
	$calendarPermissions.Name = 'calendarPermissions'
	$calendarPermissions.Size = '276, 34'
	$calendarPermissions.TabIndex = 0
	#
	# buttonCheckPermissions
	#
	$buttonCheckPermissions.Location = '723, 205'
	$buttonCheckPermissions.Margin = '6, 6, 6, 6'
	$buttonCheckPermissions.Name = 'buttonCheckPermissions'
	$buttonCheckPermissions.Size = '302, 46'
	$buttonCheckPermissions.TabIndex = 7
	$buttonCheckPermissions.Text = 'Check Permissions'
	$buttonCheckPermissions.UseVisualStyleBackColor = $True
	$buttonCheckPermissions.add_Click($buttonCheckPermissions_Click)
	#
	# calEmail
	#
	$calEmail.AutoSize = $True
	$calEmail.Location = '723, 36'
	$calEmail.Margin = '6, 0, 6, 0'
	$calEmail.Name = 'calEmail'
	$calEmail.Size = '186, 26'
	$calEmail.TabIndex = 0
	$calEmail.Text = 'Calendar Address'
	#
	# UserEmail
	#
	$UserEmail.Location = '723, 152'
	$UserEmail.Margin = '6, 6, 6, 6'
	$UserEmail.Name = 'UserEmail'
	$UserEmail.Size = '300, 32'
	$UserEmail.TabIndex = 5
	#
	# CalendarEmail
	#
	$CalendarEmail.Location = '723, 68'
	$CalendarEmail.Margin = '6, 6, 6, 6'
	$CalendarEmail.Name = 'CalendarEmail'
	$CalendarEmail.Size = '300, 32'
	$CalendarEmail.TabIndex = 6
	#
	# buttonSetPermissions
	#
	$buttonSetPermissions.Location = '723, 274'
	$buttonSetPermissions.Margin = '6, 6, 6, 6'
	$buttonSetPermissions.Name = 'buttonSetPermissions'
	$buttonSetPermissions.Size = '302, 46'
	$buttonSetPermissions.TabIndex = 8
	$buttonSetPermissions.Text = 'Set Permissions'
	$buttonSetPermissions.UseVisualStyleBackColor = $True
	$buttonSetPermissions.add_Click($buttonSetPermissions_Click)
	#
	# GroupControlTab
	#
	$GroupControlTab.Controls.Add($groupbox5)
	$GroupControlTab.Controls.Add($groupbox4)
	$GroupControlTab.Controls.Add($listGroups)
	$GroupControlTab.Controls.Add($labelOffice365Groups)
	$GroupControlTab.Controls.Add($buttonPopulateList)
	$GroupControlTab.BackColor = 'Control'
	$GroupControlTab.Location = '8, 40'
	$GroupControlTab.Margin = '6, 6, 6, 6'
	$GroupControlTab.Name = 'GroupControlTab'
	$GroupControlTab.Padding = '3, 3, 3, 3'
	$GroupControlTab.Size = '1073, 368'
	$GroupControlTab.TabIndex = 2
	$GroupControlTab.Text = 'Group Control'
	#
	# groupbox5
	#
	$groupbox5.Controls.Add($buttonRunSelection)
	$groupbox5.Controls.Add($GroupControlDeleteOption)
	$groupbox5.Controls.Add($groupControlHideOption)
	$groupbox5.Controls.Add($groupControlViewOption)
	$groupbox5.Location = '18, 162'
	$groupbox5.Margin = '6, 6, 6, 6'
	$groupbox5.Name = 'groupbox5'
	$groupbox5.Padding = '6, 6, 6, 6'
	$groupbox5.Size = '376, 169'
	$groupbox5.TabIndex = 10
	$groupbox5.TabStop = $False
	$groupbox5.Text = 'Group Control'
	#
	# buttonRunSelection
	#
	$buttonRunSelection.Location = '224, 55'
	$buttonRunSelection.Margin = '6, 6, 6, 6'
	$buttonRunSelection.Name = 'buttonRunSelection'
	$buttonRunSelection.Size = '140, 69'
	$buttonRunSelection.TabIndex = 3
	$buttonRunSelection.Text = 'Run Selection'
	$buttonRunSelection.UseVisualStyleBackColor = $True
	$buttonRunSelection.add_Click($buttonRunSelection_Click)
	#
	# GroupControlDeleteOption
	#
	$GroupControlDeleteOption.Location = '12, 109'
	$GroupControlDeleteOption.Margin = '6, 6, 6, 6'
	$GroupControlDeleteOption.Name = 'GroupControlDeleteOption'
	$GroupControlDeleteOption.Size = '176, 34'
	$GroupControlDeleteOption.TabIndex = 2
	$GroupControlDeleteOption.TabStop = $True
	$GroupControlDeleteOption.Text = 'Delete Group'
	$GroupControlDeleteOption.UseVisualStyleBackColor = $True
	#
	# groupControlHideOption
	#
	$groupControlHideOption.Location = '12, 73'
	$groupControlHideOption.Margin = '6, 6, 6, 6'
	$groupControlHideOption.Name = 'groupControlHideOption'
	$groupControlHideOption.Size = '176, 34'
	$groupControlHideOption.TabIndex = 1
	$groupControlHideOption.TabStop = $True
	$groupControlHideOption.Text = 'Hide Group'
	$groupControlHideOption.UseVisualStyleBackColor = $True
	#
	# groupControlViewOption
	#
	$groupControlViewOption.Location = '12, 36'
	$groupControlViewOption.Margin = '6, 6, 6, 6'
	$groupControlViewOption.Name = 'groupControlViewOption'
	$groupControlViewOption.Size = '176, 34'
	$groupControlViewOption.TabIndex = 0
	$groupControlViewOption.TabStop = $True
	$groupControlViewOption.Text = 'View Details'
	$groupControlViewOption.UseVisualStyleBackColor = $True
	#
	# groupbox4
	#
	$groupbox4.Controls.Add($GroupOwner)
	$groupbox4.Controls.Add($GroupHiddenStatus)
	$groupbox4.Controls.Add($labelHiddenStatus)
	$groupbox4.Controls.Add($labelMembers)
	$groupbox4.Controls.Add($GroupMembers)
	$groupbox4.Controls.Add($GroupDescription)
	$groupbox4.Controls.Add($labelGroupOwner)
	$groupbox4.Controls.Add($labelDescription)
	$groupbox4.Location = '407, 17'
	$groupbox4.Margin = '6, 6, 6, 6'
	$groupbox4.Name = 'groupbox4'
	$groupbox4.Padding = '6, 6, 6, 6'
	$groupbox4.Size = '660, 315'
	$groupbox4.TabIndex = 9
	$groupbox4.TabStop = $False
	$groupbox4.Text = 'Group Information'
	#
	# GroupOwner
	#
	$GroupOwner.AutoSize = $True
	$GroupOwner.Location = '170, 105'
	$GroupOwner.Margin = '6, 0, 6, 0'
	$GroupOwner.Name = 'GroupOwner'
	$GroupOwner.Size = '0, 26'
	$GroupOwner.TabIndex = 0
	#
	# GroupHiddenStatus
	#
	$GroupHiddenStatus.AutoSize = $True
	$GroupHiddenStatus.Location = '543, 178'
	$GroupHiddenStatus.Margin = '6, 0, 6, 0'
	$GroupHiddenStatus.Name = 'GroupHiddenStatus'
	$GroupHiddenStatus.Size = '0, 26'
	$GroupHiddenStatus.TabIndex = 0
	#
	# labelHiddenStatus
	#
	$labelHiddenStatus.AutoSize = $True
	$labelHiddenStatus.Location = '377, 178'
	$labelHiddenStatus.Margin = '6, 0, 6, 0'
	$labelHiddenStatus.Name = 'labelHiddenStatus'
	$labelHiddenStatus.Size = '155, 26'
	$labelHiddenStatus.TabIndex = 14
	$labelHiddenStatus.Text = 'Hidden Status:'
	#
	# labelMembers
	#
	$labelMembers.AutoSize = $True
	$labelMembers.Location = '12, 146'
	$labelMembers.Margin = '6, 0, 6, 0'
	$labelMembers.Name = 'labelMembers'
	$labelMembers.Size = '109, 26'
	$labelMembers.TabIndex = 13
	$labelMembers.Text = 'Members:'
	#
	# GroupMembers
	#
	$GroupMembers.BackColor = 'Window'
	$GroupMembers.Location = '12, 178'
	$GroupMembers.Margin = '6, 6, 6, 6'
	$GroupMembers.Name = 'GroupMembers'
	$GroupMembers.ReadOnly = $True
	$GroupMembers.Size = '330, 126'
	$GroupMembers.TabIndex = 0
	$GroupMembers.Text = ''
	#
	# GroupDescription
	#
	$GroupDescription.BackColor = 'Window'
	$GroupDescription.ForeColor = 'ControlText'
	$GroupDescription.Location = '151, 30'
	$GroupDescription.Margin = '6, 6, 6, 6'
	$GroupDescription.Name = 'GroupDescription'
	$GroupDescription.ReadOnly = $True
	$GroupDescription.Size = '464, 53'
	$GroupDescription.TabIndex = 10
	$GroupDescription.Text = ''
	#
	# labelGroupOwner
	#
	$labelGroupOwner.AutoSize = $True
	$labelGroupOwner.Location = '12, 105'
	$labelGroupOwner.Margin = '6, 0, 6, 0'
	$labelGroupOwner.Name = 'labelGroupOwner'
	$labelGroupOwner.Size = '148, 26'
	$labelGroupOwner.TabIndex = 9
	$labelGroupOwner.Text = 'Group Owner:'
	#
	# labelDescription
	#
	$labelDescription.AutoSize = $True
	$labelDescription.Location = '12, 31'
	$labelDescription.Margin = '6, 0, 6, 0'
	$labelDescription.Name = 'labelDescription'
	$labelDescription.Size = '127, 26'
	$labelDescription.TabIndex = 7
	$labelDescription.Text = 'Description:'
	#
	# listGroups
	#
	$listGroups.Location = '18, 48'
	$listGroups.Margin = '6, 6, 6, 6'
	$listGroups.Name = 'listGroups'
	$listGroups.Size = '293, 34'
	$listGroups.Sorted = $True
	$listGroups.TabIndex = 6
	#
	# labelOffice365Groups
	#
	$labelOffice365Groups.AutoSize = $True
	$labelOffice365Groups.Location = '18, 18'
	$labelOffice365Groups.Margin = '6, 0, 6, 0'
	$labelOffice365Groups.Name = 'labelOffice365Groups'
	$labelOffice365Groups.Size = '188, 26'
	$labelOffice365Groups.TabIndex = 5
	$labelOffice365Groups.Text = 'Office 365 Groups'
	#
	# buttonPopulateList
	#
	$buttonPopulateList.Location = '18, 94'
	$buttonPopulateList.Margin = '6, 6, 6, 6'
	$buttonPopulateList.Name = 'buttonPopulateList'
	$buttonPopulateList.Size = '188, 38'
	$buttonPopulateList.TabIndex = 0
	$buttonPopulateList.Text = 'Populate List'
	$buttonPopulateList.UseVisualStyleBackColor = $True
	$buttonPopulateList.add_Click($buttonPopulateList_Click)
	#
	# SharePointControlTab
	#
	$SharePointControlTab.Controls.Add($label1)
	$SharePointControlTab.BackColor = 'Control'
	$SharePointControlTab.Location = '8, 40'
	$SharePointControlTab.Margin = '6, 6, 6, 6'
	$SharePointControlTab.Name = 'SharePointControlTab'
	$SharePointControlTab.Padding = '3, 3, 3, 3'
	$SharePointControlTab.Size = '1073, 368'
	$SharePointControlTab.TabIndex = 3
	$SharePointControlTab.Text = 'SharePoint Control'
	#
	# label1
	#
	$label1.AutoSize = $True
	$label1.Location = '437, 159'
	$label1.Margin = '6, 0, 6, 0'
	$label1.Name = 'label1'
	$label1.Size = '202, 26'
	$label1.TabIndex = 0
	$label1.Text = 'To Be Implemented'
	#
	# UpcomingFeatures
	#
	$UpcomingFeatures.Controls.Add($labelExpandOffice365Group)
	$UpcomingFeatures.BackColor = 'Control'
	$UpcomingFeatures.Location = '8, 40'
	$UpcomingFeatures.Margin = '6, 6, 6, 6'
	$UpcomingFeatures.Name = 'UpcomingFeatures'
	$UpcomingFeatures.Padding = '3, 3, 3, 3'
	$UpcomingFeatures.Size = '1073, 368'
	$UpcomingFeatures.TabIndex = 4
	$UpcomingFeatures.Text = 'Coming Features'
	#
	# labelExpandOffice365Group
	#
	$labelExpandOffice365Group.AutoSize = $True
	$labelExpandOffice365Group.Location = '136, 56'
	$labelExpandOffice365Group.Margin = '6, 0, 6, 0'
	$labelExpandOffice365Group.Name = 'labelExpandOffice365Group'
	$labelExpandOffice365Group.Size = '796, 182'
	$labelExpandOffice365Group.TabIndex = 0
	$labelExpandOffice365Group.Text = 'Expand Office 365 Group Control (Rudamentary group control already in)
Implement SharePoint Control, mostly focused around permissions (Ben request)
Expand on Calendar Permissions
Update Icon
"Remember me" for future logins as a checkbox option near login
Somehow implement SSO for this

'
	#
	# menustrip1
	#
	[void]$menustrip1.Items.Add($HelpDropDown)
	[void]$menustrip1.Items.Add($QuickCommandsDropDown)
	$menustrip1.Location = '0, 0'
	$menustrip1.Name = 'menustrip1'
	$menustrip1.Padding = '13, 4, 0, 4'
	$menustrip1.Size = '1102, 44'
	$menustrip1.TabIndex = 6
	$menustrip1.Text = 'menustrip1'
	#
	# fontdialog1
	#
	#
	# HelpDropDown
	#
	[void]$HelpDropDown.DropDownItems.Add($AboutHelp)
	[void]$HelpDropDown.DropDownItems.Add($optionsToolStripMenuItem)
	[void]$HelpDropDown.DropDownItems.Add($knownBugsHelpMenu)
	$HelpDropDown.ImageAlign = 'BottomCenter'
	$HelpDropDown.Name = 'HelpDropDown'
	$HelpDropDown.Size = '76, 36'
	$HelpDropDown.Text = 'Help'
	#
	# AboutHelp
	#
	$AboutHelp.Name = 'AboutHelp'
	$AboutHelp.Size = '220, 36'
	$AboutHelp.Text = 'About'
	$AboutHelp.add_Click($AboutHelp_Click)
	#
	# knownBugsHelpMenu
	#
	$knownBugsHelpMenu.Name = 'knownBugsHelpMenu'
	$knownBugsHelpMenu.Size = '220, 36'
	$knownBugsHelpMenu.Text = 'Known Bugs'
	$knownBugsHelpMenu.add_Click($knownBugsHelpMenu_Click)
	#
	# QuickCommandsDropDown
	#
	[void]$QuickCommandsDropDown.DropDownItems.Add($dirSyncMenuItem)
	[void]$QuickCommandsDropDown.DropDownItems.Add($getLastSyncToolStripMenuItem)
	[void]$QuickCommandsDropDown.DropDownItems.Add($makeNewUserPasswordsToolStripMenuItem)
	[void]$QuickCommandsDropDown.DropDownItems.Add($generatePasswordToolStripMenuItem)
	[void]$QuickCommandsDropDown.DropDownItems.Add($clearConsoleToolStripMenuItem)
	$QuickCommandsDropDown.Name = 'QuickCommandsDropDown'
	$QuickCommandsDropDown.Size = '215, 36'
	$QuickCommandsDropDown.Text = 'Quick Commands'
	#
	# dirSyncMenuItem
	#
	$dirSyncMenuItem.Name = 'dirSyncMenuItem'
	$dirSyncMenuItem.Size = '304, 36'
	$dirSyncMenuItem.Text = '&DirSync'
	$dirSyncMenuItem.add_Click($dirSyncMenuItem_Click)
	#
	# getLastSyncToolStripMenuItem
	#
	$getLastSyncToolStripMenuItem.Name = 'getLastSyncToolStripMenuItem'
	$getLastSyncToolStripMenuItem.Size = '304, 36'
	$getLastSyncToolStripMenuItem.Text = '&Get Last Sync'
	$getLastSyncToolStripMenuItem.add_Click($getLastSyncToolStripMenuItem_Click)
	#
	# generatePasswordToolStripMenuItem
	#
	[void]$generatePasswordToolStripMenuItem.DropDownItems.Add($generateDomainPasswordToolStripMenuItem)
	[void]$generatePasswordToolStripMenuItem.DropDownItems.Add($generateREVPasswordToolStripMenuItem)
	[void]$generatePasswordToolStripMenuItem.DropDownItems.Add($generateStrongPasswordToolStripMenuItem)
	[void]$generatePasswordToolStripMenuItem.DropDownItems.Add($generateCustomPasswordToolStripMenuItem)
	$generatePasswordToolStripMenuItem.Name = 'generatePasswordToolStripMenuItem'
	$generatePasswordToolStripMenuItem.Size = '304, 36'
	$generatePasswordToolStripMenuItem.Text = '&Generate Password'
	#
	# makeNewUserPasswordsToolStripMenuItem
	#
	$makeNewUserPasswordsToolStripMenuItem.Name = 'makeNewUserPasswordsToolStripMenuItem'
	$makeNewUserPasswordsToolStripMenuItem.Size = '304, 36'
	$makeNewUserPasswordsToolStripMenuItem.Text = '&New User Passwords'
	$makeNewUserPasswordsToolStripMenuItem.add_Click($makeNewUserPasswordsToolStripMenuItem_Click)
	#
	# generateDomainPasswordToolStripMenuItem
	#
	$generateDomainPasswordToolStripMenuItem.Name = 'generateDomainPasswordToolStripMenuItem'
	$generateDomainPasswordToolStripMenuItem.Size = '380, 36'
	$generateDomainPasswordToolStripMenuItem.Text = 'Generate Domain Password'
	$generateDomainPasswordToolStripMenuItem.add_Click($generateDomainPasswordToolStripMenuItem_Click)
	#
	# generateREVPasswordToolStripMenuItem
	#
	$generateREVPasswordToolStripMenuItem.Name = 'generateREVPasswordToolStripMenuItem'
	$generateREVPasswordToolStripMenuItem.Size = '380, 36'
	$generateREVPasswordToolStripMenuItem.Text = 'Generate REV Password'
	$generateREVPasswordToolStripMenuItem.add_Click($generateREVPasswordToolStripMenuItem_Click)
	#
	# generateStrongPasswordToolStripMenuItem
	#
	$generateStrongPasswordToolStripMenuItem.Name = 'generateStrongPasswordToolStripMenuItem'
	$generateStrongPasswordToolStripMenuItem.Size = '380, 36'
	$generateStrongPasswordToolStripMenuItem.Text = 'Generate Strong Password'
	$generateStrongPasswordToolStripMenuItem.add_Click($generateStrongPasswordToolStripMenuItem_Click)
	#
	# generateCustomPasswordToolStripMenuItem
	#
	$generateCustomPasswordToolStripMenuItem.Name = 'generateCustomPasswordToolStripMenuItem'
	$generateCustomPasswordToolStripMenuItem.Size = '380, 36'
	$generateCustomPasswordToolStripMenuItem.Text = 'Generate Custom Password'
	$generateCustomPasswordToolStripMenuItem.add_Click($generateCustomPasswordToolStripMenuItem_Click)
	#
	# clearConsoleToolStripMenuItem
	#
	$clearConsoleToolStripMenuItem.Name = 'clearConsoleToolStripMenuItem'
	$clearConsoleToolStripMenuItem.Size = '304, 36'
	$clearConsoleToolStripMenuItem.Text = '&Clear Console'
	$clearConsoleToolStripMenuItem.add_Click($clearConsoleToolStripMenuItem_Click)
	#
	# optionsToolStripMenuItem
	#
	$optionsToolStripMenuItem.Name = 'optionsToolStripMenuItem'
	$optionsToolStripMenuItem.Size = '220, 36'
	$optionsToolStripMenuItem.Text = 'Options'
	$optionsToolStripMenuItem.add_Click($optionsToolStripMenuItem_Click)
	$menustrip1.ResumeLayout()
	$UpcomingFeatures.ResumeLayout()
	$SharePointControlTab.ResumeLayout()
	$groupbox4.ResumeLayout()
	$groupbox5.ResumeLayout()
	$GroupControlTab.ResumeLayout()
	$emailControl1.ResumeLayout()
	$calendarTab.ResumeLayout()
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox3.ResumeLayout()
	$TermianteUserTab.ResumeLayout()
	$CreateUserTab.ResumeLayout()
	$PrimaryTabGroup.ResumeLayout()
	$GUI.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $GUI.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$GUI.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$GUI.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$GUI.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $GUI.ShowDialog()

}
#endregion Source: GUI.psf

#region Source: Options.psf
function Show-Options_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$Options = New-Object 'System.Windows.Forms.Form'
	$MSOLAccountNameField = New-Object 'System.Windows.Forms.TextBox'
	$labelOffice365AccountName = New-Object 'System.Windows.Forms.Label'
	$buttonUnlock = New-Object 'System.Windows.Forms.Button'
	$buttonApply = New-Object 'System.Windows.Forms.Button'
	$labelLocalExchangeServerF = New-Object 'System.Windows.Forms.Label'
	$syncServerFQDN = New-Object 'System.Windows.Forms.TextBox'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	#---------------------
	# Form-based Variables
	#---------------------
	
	$Options_Load={
		$syncServerFQDN.Text = $syncServer
		$MSOLAccountNameField.Text = $MSOLAccount
		$buttonApply.Enabled = $false
	}
	
	$buttonOK_Click={
	}
	
	$syncServerFQDN_TextChanged={
		$buttonApply.Enabled = $true
	}
	
	$buttonApply_Click={
		$global:syncServer = $syncServerFQDN.Text
		$global:MSOLAccount = $MSOLAccountNameField.Text
		$buttonApply.Enabled = $false
	}
	
	$buttonUnlock_Click={
		
		if ($buttonUnlock.Text -eq "Unlock")
		{
			$syncServerFQDN.Enabled = $true
			$MSOLAccountNameField.Enabled = $true
			$buttonUnlock.Text = "Lock"
		}
		elseif ($buttonUnlock.Text -eq "Lock")
		{
			$syncServerFQDN.Enabled = $false
			$MSOLAccountNameField.Enabled = $false
			$buttonUnlock.Text = "Unlock"
		}
	}
	
	$MSOLAccountNameField_TextChanged={
	
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$Options.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Options_MSOLAccountNameField = $MSOLAccountNameField.Text
		$script:Options_syncServerFQDN = $syncServerFQDN.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$MSOLAccountNameField.remove_TextChanged($MSOLAccountNameField_TextChanged)
			$buttonUnlock.remove_Click($buttonUnlock_Click)
			$buttonApply.remove_Click($buttonApply_Click)
			$syncServerFQDN.remove_TextChanged($syncServerFQDN_TextChanged)
			$buttonOK.remove_Click($buttonOK_Click)
			$Options.remove_Load($Options_Load)
			$Options.remove_Load($Form_StateCorrection_Load)
			$Options.remove_Closing($Form_StoreValues_Closing)
			$Options.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$Options.SuspendLayout()
	#
	# Options
	#
	$Options.Controls.Add($MSOLAccountNameField)
	$Options.Controls.Add($labelOffice365AccountName)
	$Options.Controls.Add($buttonUnlock)
	$Options.Controls.Add($buttonApply)
	$Options.Controls.Add($labelLocalExchangeServerF)
	$Options.Controls.Add($syncServerFQDN)
	$Options.Controls.Add($buttonOK)
	$Options.AcceptButton = $buttonOK
	$Options.AutoScaleDimensions = '13, 26'
	$Options.AutoScaleMode = 'Font'
	$Options.ClientSize = '615, 524'
	$Options.FormBorderStyle = 'FixedDialog'
	$Options.Margin = '13, 12, 13, 12'
	$Options.MaximizeBox = $False
	$Options.MinimizeBox = $False
	$Options.Name = 'Options'
	$Options.StartPosition = 'CenterScreen'
	$Options.Text = 'Options'
	$Options.add_Load($Options_Load)
	#
	# MSOLAccountNameField
	#
	$MSOLAccountNameField.Enabled = $False
	$MSOLAccountNameField.Location = '40, 154'
	$MSOLAccountNameField.Margin = '6, 6, 6, 6'
	$MSOLAccountNameField.Name = 'MSOLAccountNameField'
	$MSOLAccountNameField.Size = '394, 32'
	$MSOLAccountNameField.TabIndex = 6
	$MSOLAccountNameField.add_TextChanged($MSOLAccountNameField_TextChanged)
	#
	# labelOffice365AccountName
	#
	$labelOffice365AccountName.AutoSize = $True
	$labelOffice365AccountName.Location = '40, 124'
	$labelOffice365AccountName.Margin = '6, 0, 6, 0'
	$labelOffice365AccountName.Name = 'labelOffice365AccountName'
	$labelOffice365AccountName.Size = '261, 26'
	$labelOffice365AccountName.TabIndex = 5
	$labelOffice365AccountName.Text = 'Office 365 Account Name'
	#
	# buttonUnlock
	#
	$buttonUnlock.Location = '463, 13'
	$buttonUnlock.Margin = '6, 6, 6, 6'
	$buttonUnlock.Name = 'buttonUnlock'
	$buttonUnlock.Size = '126, 46'
	$buttonUnlock.TabIndex = 4
	$buttonUnlock.Text = 'Unlock'
	$buttonUnlock.UseVisualStyleBackColor = $True
	$buttonUnlock.add_Click($buttonUnlock_Click)
	#
	# buttonApply
	#
	$buttonApply.Enabled = $False
	$buttonApply.Location = '463, 71'
	$buttonApply.Margin = '6, 6, 6, 6'
	$buttonApply.Name = 'buttonApply'
	$buttonApply.Size = '126, 43'
	$buttonApply.TabIndex = 3
	$buttonApply.Text = 'Apply'
	$buttonApply.UseVisualStyleBackColor = $True
	$buttonApply.add_Click($buttonApply_Click)
	#
	# labelLocalExchangeServerF
	#
	$labelLocalExchangeServerF.AutoSize = $True
	$labelLocalExchangeServerF.Location = '40, 50'
	$labelLocalExchangeServerF.Margin = '6, 0, 6, 0'
	$labelLocalExchangeServerF.Name = 'labelLocalExchangeServerF'
	$labelLocalExchangeServerF.Size = '305, 26'
	$labelLocalExchangeServerF.TabIndex = 2
	$labelLocalExchangeServerF.Text = 'Local Exchange Server FQDN'
	#
	# syncServerFQDN
	#
	$syncServerFQDN.Enabled = $False
	$syncServerFQDN.Location = '40, 82'
	$syncServerFQDN.Margin = '6, 6, 6, 6'
	$syncServerFQDN.Name = 'syncServerFQDN'
	$syncServerFQDN.Size = '394, 32'
	$syncServerFQDN.TabIndex = 1
	$syncServerFQDN.add_TextChanged($syncServerFQDN_TextChanged)
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '427, 454'
	$buttonOK.Margin = '6, 6, 6, 6'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '162, 46'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$Options.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $Options.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$Options.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$Options.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$Options.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $Options.ShowDialog()

}
#endregion Source: Options.psf

#Start the application
Main ($CommandLine)
